#+TITLE: Build Orchestration System
#+AUTHOR: Brett Viren
#+EMAIL: bv@bnl.gov
#+DATE: \today
#+LATEX_HEADER: \usepackage{hyperref}
#+LATEX_HEADER: \hypersetup{
#+LATEX_HEADER:   hyperindex=true,
#+LATEX_HEADER:   plainpages=false,
#+LATEX_HEADER:   colorlinks=true,
#+LATEX_HEADER:   linkcolor=black
#+LATEX_HEADER: }

#+LATEX: \pagebreak

#+BEGIN_ABSTRACT
This document describes a build orchestration system to assist in producing software installations made up of  suites of individual packages.  It allows for automation, coexistence of multiple versions and platforms, shared packages between suites.  It describes the major components and defines their interfaces.  The orchestration is performed through a contract between a high level orchestration application, a central configuration file and a collection per-package "shim scripts" that provide any special installation procedures specific to a package.
#+END_ABSTRACT


* Overview

This /orchestration/ works through a contract between three major components:

 - A configuration file describing one or more suites of software packages with one particular suite named as a target.
 - An orchestration application that interprets this file, drives the installation but defers to external scripts for installation details.
 - A package-specific cascade of a set of "shim" scripts which perform the actual installation actions.

Layout of temporary build files and final installation directories are described in the suite configuration.  This description is written using parameters which are interpreted on a per package bases by the application.  The application communicates the results to the shim scripts via environment variables.  A subset of variables are predefined and guaranteed to exist and the shim scripts are contracted to honor them during their actions.  Additional variables may be added on a per-package basis for special use by the shim scripts.  Within these confines, the shim scripts are free to perform whatever actions are necessary to fulfill their goals.  


* Orchestration Contract

The orchestration requires the participant components to honor a contract.  This contract governs the definition of a set of variable describing an installation, the steps into which an installation is partitioned and the behavior of the shim scripts that provide per-package custom installation actions.  


** Suite Configuration File

A suite is a collection of packages of specific versions built with a consistent set of build options (aka qualifiers) referred to as "tags", installed in a common area following a layout pattern, for the same platform and intended to be used together in concert.  Different suites may have overlap.  

Suites are fully specified in a configuration file.  This file provides an expressive and flexible format that can succinctly describe multiple suites of multiple versions and platform flavors or build qualifiers.  Providing the user with this configuration file, the orchestration application and the name of a desired suite is enough for them to produce an installation.  The application, with the help of the shim scripts, will handle locating installation directories, retrieving source code and building, installing and validating the packages as well as managing the user environment.

The syntax of the configuration file follows a format sometimes called "INI".  It consists of a number of titled sections which contain key/value pairs.  Section titles are written in the form =[<type> <name>]= except for one special =[global]= section.  A section =<type>= is a single word and the =<name>= may consist of one or more words.  The payload of each section is a collection of key/value pairs, one per line.  
Keys and values are separated either by a "=:=" or a "===".  Comments begin with "=#=".

The following sections are expected:

 - =global=- :: defines some global default values the direct the application
 - =suite= :: defines the =tags= key and high level parts of a suite (=packages= and =defaults= keys) which detailed in other sections.  The suite name should be a single word as it may be used as a file system path element.
 - =packagelist= :: contains a list of names and versions of the packages which make up the suite.  A package list may be named in a free form manner.  It is referred to by the =suite='s =packages= key.
 - =defaults= :: provide a collection of default variable definitions, referred to by the suite's =defaults= key
 - =package= :: a per-package optional section for overriding specific variable definitions.  The name of the package section includes a package name and an optional version constraint.

Values in the suite file are strings.  They can be composed from the value of variables by surrounding the variable name with "={}=".   Any key from a section used in the configuration may be used as a variable (recursive loops must be avoided).   Any sections not referenced starting with the selected =suite= are ignored. Variables defined in the =defaults= section can be overridden on a per-package basis by any defined in a =package= section.

Additional variables defined by the orchestration application may also be used.  They include:

 - =suite= :: the suite name
 - =package= :: the name of the current package
 - =version= :: the version string of the current package
 - =upsflavor= :: the UPS flavor string for the build host
 - =tagsdash= :: the list of tags joined by a dash 
 - =tagscolon= :: the list of tags joined by a colon

Each package gets its own copy of the variables independently interpolated.  These variables are communicated to the shim scripts through the executing environment.  Their names are up-cased and have =ORCH_= prepended.  There is a set of required variables, listed below.  If they are not provided the application will abort.  Additional variables needed for specific package shims may also be defined.

There are also variables that the orchestration application directly interprets:

 - =shim_path= :: used to locate package shim scripts (more below)

A partial example suite configuration file is provided in [[../tests/test.cfg][tests/test.cfg]].

** Package Shim Scripts

Each package provides a set of shim scripts that override the default behavior provided by the application.  Most are required but some are optional.  The steps and their requirements are listed below.  

 - =version= :: check if the requested package version is supported by the shim
 - =dependencies= :: produce a dependency file
 - =environment= :: produce a file containing shell environment settings needed to use the package
 - =download= :: get the package source code 
 - =unpack= :: unpack the source archive file
 - =prepare= :: run any required configuration or patching of the source code
 - =build= :: produce the results of building the package software
 - =install= :: place the build results into their final location
 - =validate= :: perform any tests, checks or validation on the installation

Some general rules governing the shim scripts:

 - A script file which implements a step must take the same name as the step it implements. 
 - Any step which is not required or is not applicable for a given package may simply be omitted.  
 - Each shim script must exit immediately and return a non-zero return code to the calling environment if any error is encountered.   
 - Any standard output or standard error produced is logged by the application but otherwise not considered by the application (see the =ORCH_LOG= variable below).  
 - Some scripts are given command line arguments and all may check environment variables set by the application as described below.  
 - From the point of view of the package shim the scripts are executed in the order listed above.  However the application may do either a depth-first or a breadth-first descent when dealing with a full suite of packages.
 - Shim scripts may be called multiple times (see section [[sec:shim-behavior]]).

The following sub-sections describe specifics about each step

*** Version

The =version= script may be implemented in order to signal that the requested package version can not be built by the package shim to which the script belongs.  In general it is expected that this step is left unimplemented except potentially to reject versions that are newer than existed when the script was last tested.   This script does not have a full =ORCH_= environment available.  It is given the requested version string as its single command line argument.  It should return a non-zero code to the calling environment if that version can not be built by its fellow package shim scripts.

*** Dependencies

This script is given a single command line argument which is to be interpreted as a file name in which to write descriptions of any packages on which this package depends.  The dependency may include a /version constraint string/.  If constraints are given they will be checked for consistency against the requested versions of the packages by the application.  Any failed constraints will abort the application.  The build is also aborted if any packages are listed but are are not specified in the suite description.

The dependency information is written in the following form, one line per dependent package:

#+BEGIN_EXAMPLE
<package name> [<constraint>]
#+END_EXAMPLE

The version constraint is optional but should be specified if there is any sensitivity to the requested package version.  The version constraint can consist of multiple =<constraint>= separated by "=and=" or "=or=" operators or be a /version inequality/.  A version inequality is specified as the literal =version= and inequality operator and a version string:

#+BEGIN_EXAMPLE
version <operator> <version string>
#+END_EXAMPLE

The operator can be any of these inequalities which have the expected meanings:

#+BEGIN_EXAMPLE
< <= == != => >
#+END_EXAMPLE

Some example dependency lines:

#+BEGIN_EXAMPLE
simplepackage
carefulpackage version >= 1.0 and version < 2.0
bugpackage version != 3.14159
#+END_EXAMPLE

*** Environment

The =environment= shim script is run to produce a script that can modify =bash= environment in order to use or build against the package.  This environment modification code must be generated independent of whether the package has been installed yet or not.  The script is written to the file named by the single command line argument given to =environment=.  If the package depends on other packages in the suite they must be declared as described in the next section.  The =environment= shim script may then assume that the setup script produced by the package's dependencies have also been sourced into the user environment just before its own setup script will be sourced.  The setup script may make use of the library of =bash= functions in =orchestrate.sh= provided by the orchestration application.  See section [[sec:bash]] for details.  No other special assumptions 
should be made about the calling environment.  

The environment produced by sourcing the result of this shim script is not used to provide environment for the shim scripts of the package itself.  It is, however, used to provide environment setup for shim scripts of any other packages that depend on this package (except for the =version= and =environment= shim scripts).


*** Download

The =download= shim script is used to retrieve the source code given the =ORCH_PACKAGE_URL= into the =ORCH_SOURCE_DIR=.  This directory will be the current working directory where this script is called.  This script only needs implementation only for unusual download methods that are not directly implemented by the application.

*** Unpack

If the source package is downloaded as an archive file the =unpack= shim script may be implemented in order to unpack it.  The target directory, as determined from the package URL, is available from the =ORCH_UNPACKED_DIR= variable.  This shim script is run from the =ORCH_SOURCE_DIR=.  It only needs to be provided for any unusual unpacking methods not directly implemented by the application.

*** Prepare 

Some builds require a configuration or preparation step before compilation.  The =prepare= shim script can be implemented to provide this.  It is run from the =ORCH_BUILD_DIR= and the =ORCH_SOURCE_DIR= variable can be used to locate the unpacked source.

*** Build 

The actual build of the package is done in the =build= shim script.  It is run from the =ORCH_BUILD_DIR=.

*** Install 

Moving or copying the build results to their final installation location is done by implementing the =install= script.  It is run from the =ORCH_BUILD_DIR= and the =ORCH_INSTALL_DIR= environment variable should be used to locate the base of the installation area for the package.

*** Validate 

Any post-installation validation can be implemented in the =validate= shim script.  It is run from the =ORCH_INSTALL_DIR=.

** Locating a Package Shim

A /package shim/ is a named collection of /shim scripts/.  The shim scripts must exist in a directory sharing the same name as the package shim and shim scripts themselves must share the same name as the installation step they implement.  Package shim directories are located by searching an ordered /shim path/ but may be disqualified if they do not provide shim scripts that are compatible with the requested package version (as determined by running a =version= shim script, if it exists). For any given step, the first shim script found along this path in a qualified directory is used.

*** Package Shim Name

By default the package shim name is take to be that of the package itself.  This can be changed by explicitly setting the =shim_name= in the =package= section of the configuration.  A =shim_fallback= can also be specified (default is =default=) in order to specify a fallback.  

Note, in order to be generic, the default shim scripts provided by the application are not idempotent.  Relying on them may result in unnecessary repetition of actions if the application is rerun.

*** Shim Path

The application builds a shim path from several prioritized sources.  They are:

 - Zero or more command line flags ('=-s/-shims/=')
 - The =ORCH_SHIM_PATH= variable from the environment calling the orchestration application
 - The =shim_path= variable set sections of the suite configuration sections:
   - =package=
   - =suite=
   - =global=
 - Built-in directories provided by the application.

A portion of a shim path specified from any of these sources may itself be a colon-separated path.
The final shim path is composed by concatenating all paths in the order listed above.


** Automating the downloading of custom shim scripts.

T.B.D.  A feature to be added is to specify a =shim_url= in the configuration to cause package shims to be downloaded and unpacked into the shim path.

** Shim Script Execution Environment

The environment in which each shim executes is defined through a cascade of sources.  It begins with the environment of the user which invokes the orchestration application.  The variables defined in the suite description =defaults= section are then applied.  Then
the results of the =environment= shim scripts for the  packages returned by recursive checking the output of the current package's =dependencies= shim script are then applied (except when calling the =version=, =environment= and =dependencies= stages themselves).  The =environment= shim is not applied to the package shim itself, rather the =package= section of the suite configuration file brings up the end of the cascade.

The following orchestration environment variable are guaranteed to be defined in the environment executing a shim script.

 - =ORCH_LOG= :: a log file to which the shim may append messages (script should not truncate!)
 - =ORCH_PACKAGE_NAME= :: the current package name
 - =ORCH_PACKAGE_VERSION= :: the current package version string
 - =ORCH_PACKAGE_URL= :: the URL for the source code
 - =ORCH_SOURCE_DIR= :: the full path to a directory in which the source must be unpacked
 - =ORCH_UNPACKED_DIR= :: the full path to the unpacked source.
 - =ORCH_BUILD_DIR= :: the full path to a directory in which to build the source
 - =ORCH_INSTALL_DIR= :: the full path to the installation base directory

** Shim Script Behavior
<<sec:shim-behavior>>

While not strictly part of the protocol, to be well behaved, the shim scripts should be written to adhere to the following principles:

 - idempotent :: rerunning a shim script should not cause repetition of previous successfully applied actions
 - strict :: any error produced during any action by the shim script should cause a clear message to be printed and an immediate termination of the shim script in a way that communicates a non-zero return code to the calling environment
 - regular :: a high level of shim code reuse should be maintained.

When the shim script is implemented in =/bin/bash=, a collection of =bash= functions are provided in the executing environment.  They are defined in section [[sec:bash]].  Through the shim cascade mechanism described above, it is often possible to reuse existing shims.  This is particularly true for the =download= and =unpack= steps.


* Orchestration Applications

The orchestration applications must adhere to the protocol as described above but are otherwise free of restriction.  Required features include:

 - Check correctness of a suite configuration file
 - List packages and versions in a suite
 - Install a consistent subset of a suite
 - Work out global installation order based on declared dependencies
 - Implement breadth-first or depth-first build
 - Perform actions for and report their results to the user in detail (to support detailed continuous integration)


* Orchestration =bash= Utility Functions
<<sec:bash>>

t.b.d.


* Implementation for UPS based installations 

This system is implemented to support UPS-based installations.  All files can be downloaded from various Fermilab services.

** Orchestration 

All parts of the orchestration code are held in various git repositories of the =build-orchestration= Fermilab Redmine project.  The repositories are all named =orchestration-<name>= with the following names:

 - =-<package>= :: a package shim
 - =-util= :: bash utility scripts used by =-<package>= shims
 - =-cmdline= :: a command line orchestration application
 - =-suites= :: a suite configuration files

** Source Packages

Pristine mirrors of supported source archive files are available from a Fermilab server [fn:oink].  This is to simplify configuration and to maintain independence from upstream server connectivity.

[fn:oink] http://oink.fnal.gov/distro/packages/




** Role of UPS


